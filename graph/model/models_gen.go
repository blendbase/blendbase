// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Company struct {
	Name    string  `json:"name"`
	Website *string `json:"website"`
}

type Connect struct {
	Integrations []*ConsumerIntegration `json:"integrations"`
}

type ConsumerIntegration struct {
	ID             *string         `json:"id"`
	Code           *string         `json:"code"`
	Type           *string         `json:"type"`
	ServiceCode    *string         `json:"serviceCode"`
	ServiceName    *string         `json:"serviceName"`
	Description    *string         `json:"description"`
	Enabled        *bool           `json:"enabled"`
	CallbackURL    *string         `json:"callbackURL"`
	LoginURL       *string         `json:"loginURL"`
	Oauth2Metadata *OAuth2Metadata `json:"oauth2Metadata"`
	AuthType       AuthType        `json:"authType"`
}

type Contact struct {
	ID          string     `json:"id"`
	CreatedAt   *time.Time `json:"createdAt"`
	UpdatedAt   *time.Time `json:"updatedAt"`
	Archived    *bool      `json:"archived"`
	Name        *string    `json:"name"`
	FirstName   *string    `json:"firstName"`
	LastName    *string    `json:"lastName"`
	Email       *string    `json:"email"`
	Phone       *string    `json:"phone"`
	Website     *string    `json:"website"`
	CompanyName *string    `json:"companyName"`
	Notes       []*Note    `json:"notes"`
}

type ContactConnection struct {
	PageInfo *PageInfo      `json:"pageInfo"`
	Edges    []*ContactEdge `json:"edges"`
}

type ContactEdge struct {
	Node   *Contact `json:"node"`
	Cursor string   `json:"cursor"`
}

type ContactInput struct {
	CompanyName *string `json:"companyName"`
	FirstName   *string `json:"firstName"`
	LastName    *string `json:"lastName"`
	Email       *string `json:"email"`
	Phone       *string `json:"phone"`
	Website     *string `json:"website"`
}

type ContactUpdateResponse struct {
	ID string `json:"id"`
}

type Crm struct {
	Contact       *Contact               `json:"contact"`
	Contacts      *ContactConnection     `json:"contacts"`
	Opportunities *OpportunityConnection `json:"opportunities"`
	Opportunity   *Opportunity           `json:"opportunity"`
}

type Note struct {
	ID        string     `json:"id"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
	Content   string     `json:"content"`
}

type NoteInput struct {
	Content string `json:"content"`
}

type OAuth2ConfigurationInput struct {
	ClientID                    *string `json:"clientID"`
	ClientSecret                *string `json:"clientSecret"`
	SalesforceInstanceSubdomain *string `json:"salesforceInstanceSubdomain"`
}

type OAuth2Metadata struct {
	ClientCredentialsSet bool `json:"clientCredentialsSet"`
	TokensSet            bool `json:"tokensSet"`
}

type Opportunity struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Amount    *string    `json:"amount"`
	StageName *string    `json:"stageName"`
	CloseDate *time.Time `json:"closeDate"`
	Notes     []*Note    `json:"notes"`
}

type OpportunityConnection struct {
	PageInfo *PageInfo          `json:"pageInfo"`
	Edges    []*OpportunityEdge `json:"edges"`
}

type OpportunityEdge struct {
	Node   *Opportunity `json:"node"`
	Cursor string       `json:"cursor"`
}

type OpportunityInput struct {
	Name      string    `json:"name"`
	Amount    *string   `json:"amount"`
	StageName string    `json:"stageName"`
	CloseDate time.Time `json:"closeDate"`
}

type PageInfo struct {
	HasNextPage bool    `json:"hasNextPage"`
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
}

type AuthType string

const (
	AuthTypeOauth2 AuthType = "oauth2"
	AuthTypeSecret AuthType = "secret"
)

var AllAuthType = []AuthType{
	AuthTypeOauth2,
	AuthTypeSecret,
}

func (e AuthType) IsValid() bool {
	switch e {
	case AuthTypeOauth2, AuthTypeSecret:
		return true
	}
	return false
}

func (e AuthType) String() string {
	return string(e)
}

func (e *AuthType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthType", str)
	}
	return nil
}

func (e AuthType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
